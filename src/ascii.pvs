
arith_expr : THEORY BEGIN
  V_T : TYPE = below(256)
  V_N_b : nat = 10
  V_N : TYPE = below(V_N_b)
  arith_expr : DATATYPE
  BEGIN
    v(n: int): value?
    add(a, b: arith_expr): add?
    sub(a, b: arith_expr): sub?
    mult(a, b: arith_expr): mult?
    div(a, b: arith_expr): div?
    incorrect: incorrect?
  END arith_expr
  V_S : TYPE = arith_expr
  IMPORTING semantic_parser[V_T, <=, V_N_b, 100, V_S]

  ascii_to_integer(chr : below(256)): int =
    COND
    chr = 48 -> 0,
    chr = 49 -> 1,
    chr = 50 -> 2,
    chr = 51 -> 3,
    chr = 52 -> 4,
    chr = 53 -> 5,
    chr = 54 -> 6,
    chr = 55 -> 7,
    chr = 56 -> 8,
    chr = 57 -> 9,
    ELSE     -> 0
    ENDCOND

  numeric_to_integer(t : ast): int =
    IF (range?(t)) THEN ascii_to_integer(x(t)) ELSE 0 ENDIF

  first_digit(t : pre_ast): int =
   CASES t OF
         prior(s, e, t1, t2) :
            IF (fail?(t1) ∧ range?(t2)) THEN
                ascii_to_integer(x(t2)) ELSE
                (IF (seq?(t1) ∧ terminal?(T1(t1)) ∧ range?(T2(t1))) THEN
                   -1*ascii_to_integer(x(T2(t1))) ELSE 0 ENDIF) ENDIF
         ELSE 0
   ENDCASES

  aux(res : int, ts : pre_ast) : Recursive arith_expr =
    CASES ts OF star(s, e, t1, t2) : if (skip?(t2)) THEN v(res) ELSE aux(10*res + numeric_to_integer(t1), t2) ENDIF
    ELSE v(-1000)
    ENDCASES
  MEASURE astMeasure(ts)

  numeric_seq_to_integer(t : pre_ast) : arith_expr =
    CASES t OF
      seq(e, s, t1, t2) : aux(first_digit(t1), t2)
      ELSE incorrect
    ENDCASES

  operation : TYPE =  [arith_expr, arith_expr -> arith_expr]
  a1, a2 : VAR arith_expr
  mult_op : operation = λ(a1, a2) : mult(a1, a2)
  add_op : operation = λ(a1, a2) : add(a1, a2)
  div_op : operation = λ(a1, a2) : div(a1, a2)
  sub_op : operation = λ(a1, a2) : sub(a1, a2)

  left_assoc_op(t : ast, res : arith_expr) : RECURSIVE arith_expr =
    % t = plus(seq(prior(op1, op2), T2(T0(t))), Ts(t))
    IF (plus?(t) ∧ ¬fail?(T0(t)) ∧ seq?(T0(t)) ∧ semantic?(T2(T0(t)))) THEN
       let op = T1(T0(t)) in
       let op_code = if fail?(T1(op)) then x(T2(op)) else x(T1(op)) endif in
       Cond
          op_code = 45 -> left_assoc_op(Ts(t), sub(res, S(T2(T0(t))))),
          op_code = 43 -> left_assoc_op(Ts(t), add(res, S(T2(T0(t))))),
          op_code = 42 -> left_assoc_op(Ts(t), mult(res, S(T2(T0(t))))),
          op_code = 47 -> left_assoc_op(Ts(t), div(res, S(T2(T0(t))))),
          else -> v(-4)
       endcond
    ELSE res ENDIF
  MEASURE astMeasure(t)



END arith_expr


test_ascii : THEORY BEGIN
  IMPORTING arith_expr
  IMPORTING peg_extented[V_T, <=, V_N_b]
  V_T : TYPE = below(256)
  V_N_b : nat = 10
  V_N : TYPE = below(V_N_b)
  V_S : TYPE = arith_expr


  number :      Δ = nonTerminal(0)
  digit :       Δ = range(48, 57) % [0-9]
  nzdigit :     Δ = range(49, 57) % [1-9]
  minus :       Δ = terminal(45) % '-'
  plus :        Δ = terminal(43) % '+'


  paranthesed : Δ = nonTerminal(1)
  l_paranthesis:Δ = terminal(40) % '('
  r_paranthesis:Δ = terminal(41) % ')'

  value :       Δ = nonTerminal(2)

  product :     Δ = nonTerminal(3)
  times :       Δ = terminal(42) % '*'
  slash :       Δ = terminal(47) % '/'

  sum_term :    Δ = nonTerminal(4)

  sum :         Δ = nonTerminal(5)

  expression :  Δ = nonTerminal(6)

  entry :       Δ = nonTerminal(7)
  entry_v : V_N = 7


  P_exp : [V_N -> Δ] = λ(A : V_N):
    COND
      % Number
      A = 0 -> seq(prior(seq(minus, nzdigit), nzdigit), star(digit)),
      % Paranthesed expression
      A = 1 -> seq3(l_paranthesis, expression, r_paranthesis),
      % Value
      A = 2 -> prior(number, paranthesed),
      % Product
      A = 3 -> seq(value, plus(seq(prior(times, slash), value))),
      % Term for sum
      A = 4 -> prior(product, value),
      % Sum
      A = 5 -> seq(sum_term, plus(seq(prior(plus, minus), sum_term))),
      % Expression
      A = 6 -> prior3(sum, product, value),
      % Entry point
      A = 7 -> expression,
      ELSE  -> ε
    ENDCOND

  choose_prior(t : ast) : RECURSIVE arith_expr =
      COND
      semantic?(t) -> S(t),
      prior?(t) ∧ ¬fail?(T1(t)) -> choose_prior(T1(t)),
      prior?(t) ∧  fail?(T1(t)) -> choose_prior(T2(t)),
      else -> v(-2)
      endcond
  MEASURE astMeasure(t)

  P_inp : [V_N, semanticTree -> V_S] = λ(A: V_N, T: semanticTree) :
    COND
      A = 0 -> numeric_seq_to_integer(T),
      A = 1 -> IF (seq?(T) ∧ seq?(T2(T)) ∧ semantic?(T1(T2(T)))) THEN S(T1(T2(T))) ELSE incorrect ENDIF,
      A = 2 -> choose_prior(T),
      A = 3 -> IF (seq?(T) ∧ semantic?(T1(T)) ∧ plus?(T2(T))) THEN
                   left_assoc_op(T2(T), S(T1(T)))
               ELSE
                   v(-3)
               ENDIF,
      A = 4 -> choose_prior(T),
      A = 5 -> IF (seq?(T) ∧ semantic?(T1(T)) ∧ plus?(T2(T))) THEN
                   left_assoc_op(T2(T), S(T1(T))) ELSE v(-5) ENDIF,
      A = 6 -> choose_prior(T),
      ELSE  -> v(-1)
    ENDCOND

  parser_semantic : [input -> ast] = λ(inp : input) : (sempp(P_exp, P_inp, entry_v, P_exp(entry_v), inp, 0, 0, (λ(A : V_N, s : inp_bound) : unknown))`1)
  parser_ref :      [input -> ast] = λ(inp : input) : parsing(P_exp, entry_v, P_exp(entry_v), inp, 0, 0)
  res_sem(inp: input) : V_S = S(parser_semantic(inp))


  inp1(x : below(1000)) : V_T = COND
    x = 0 -> 49,
    ELSE -> 0
  ENDCOND

  inp2(x : below(1000)) : V_T = COND
    x = 0 -> 49,
    x = 1 -> 43,
    x = 2 -> 50,
    ELSE -> 0
  ENDCOND

  inp3(x : below(1000)) : V_T = COND
    x = 0 -> 49,
    x = 1 -> 43,
    x = 2 -> 50,
    x = 3 -> 42,
    x = 4 -> 53,
    ELSE -> 0
  ENDCOND

% "1+2+3+4+5+6+7-8"
inp4 : input = LAMBDA (x: below(1000)) : COND x = 0 -> 49, x = 1 -> 43, x = 2 -> 50, x = 3 -> 43, x = 4 -> 51, x = 5 -> 43, x = 6 -> 52, x = 7 -> 43, x = 8 -> 53, x = 9 -> 43, x = 10 -> 54, x = 11 -> 43, x = 12 -> 55, x = 13 -> 45, x = 14 -> 56, ELSE -> 0 ENDCOND

strToInp(s: string) : input = λ(x : below(1000)) :
if (x < s`length) then code(s`seq(x))
else 0 endif




END test_ascii
