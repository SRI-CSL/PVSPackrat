% ————————————————————————————–
% semantic_parser.pvs
%  |– semantic_parser THEORY
%     Defines the semantic packrat parser
% ————————————————————————————–


semantic_parser [
      V_T   : TYPE+,
      <=    : (total_order?[V_T]),
      V_N_b : {k : nat | k > 0},
      bound : posnat,
      V_S   : TYPE
      ]: THEORY
  BEGIN
  IMPORTING peg_parser[V_T, <=, V_N_b, bound, V_S]
  IMPORTING semantic_interp[V_T, <=, V_N_b, bound, V_S]

  b : VAR inp_bound

  % Array for packrat memoization
  saved_result: DATATYPE
    BEGIN
      unknown : unknown?
      known(status: astType, T : pre_ast) : known?
    END saved_result

  astTypeOf(T: pre_ast) : TYPE = {s: astType | s = astType?(T)}
  equalTo(T: pre_ast) : TYPE = {t: pre_ast | t = T}

  % Type to store results of partial parsing. Maintains equivalence with reference parser
  results(P_exp : WF_nT,
          P_inp : semantic_interp,
  	      inp   : input) : TYPE =
  	   	  { res : [[V_N, inp_bound] -> saved_result] |
		    FORALL (A : V_N, s : upto(bound)) :
		       LET T_p = parsing(P_exp, A, P_exp(A), inp, s, s) IN
  		       known?(res(A,s)) ⇒
		       ((astType?(T_p) = failure
		          ∧ status(res(A,s)) = failure
		          ∧ T(res(A,s)) = fail(s(T_p), e(T_p)))
		       ∨(astType?(T_p) = success
		          ∧ status(res(A,s)) = success
			  ∧ T(res(A,s)) = semantic(s(T_p), e(T_p), A, P_inp(A, s_inp(P_inp, T_p))))
		  )}

  % Semantic packrat parser - equivalent with reference parser modulo semantic interpretation
  sempp(P_exp : WF_nT,
  	    P_inp : semantic_interp,
  	    A     : below(V_N_b),                   % Current non Terminal
            G     : {e : Δ | subterm(e, P_exp(A))}, % Grammar node
            inp   : input,                          % Input array
  	    s     : upto(bound),                      % Starting index
  	    s_T   : {k : upto(s) | (k=s) ⇒ g_wf(G, A, P_0c?(P_exp), strong)},
  	    res   : results(P_exp, P_inp, inp)) :
      % Recursively computes the tree result and the set of partial results memoizied
      RECURSIVE [
                   astTypeOf(parsing(P_exp, A, G, inp, s, s_T)),
                   equalTo(s_inp(P_inp, parsing(P_exp, A, G, inp, s, s_T))),
	           results(P_exp, P_inp, inp)
		] =
          CASES G OF
              ε: (success, ε(s,s), res),
              any: if (s+1 > bound)
	           then (failure, fail(s,s), res)
		   else (success, any(s, s+1, inp(s)), res) endif,
              terminal(a): if (s+1 <= bound and inp(s)=a)
	                   then (success, terminal(s, s+1, a, a), res)
	                   else (failure, fail(s, min(s+1, bound)), res) endif,
              range(a, b): if (s+1 <= bound and in_range(a,b)(inp(s)))
	                   then (success, range(s, s+1, a, b, inp(s)), res)
	      		   else (failure, fail(s, min(s+1, bound)), res) endif,
              nonTerminal(B):
	          cases res(B,s) of
		    known(status, T_B): (status, T_B, res),
		    unknown: let (status, T_B, res) = sempp(P_exp, P_inp, B, P_exp(B), inp, s, s, res) in
		             if (status = success) then
			        let sem_T = semantic(s, e(T_B), B, P_inp(B,T_B)) in
				(success, sem_T, res WITH [(B,s) := known(success, sem_T)])
		             else
			        let fail_T = fail(s, e(T_B)) in
				(failure, fail_T, res WITH [(B,s) := known(failure, fail_T)])
			     endif
		  endcases,
              seq(e1, e2):
                  let (status1, T1, res)  = sempp(P_exp, P_inp, A, e1, inp, s, s_T, res) in
    	    	      if (status1 = failure)
		      then (failure, fail(s, e(T1)), res)
    		      else
		          let (status2, T2, res) = sempp(P_exp, P_inp, A, e2, inp, e(T1), s_T, res) in
			  if (status2 = failure)
			  then (failure, fail(s, e(T2)), res)
			  else (success, seq(s, e(T2), T1, T2), res)
			  endif
		      endif,
              prior(e1, e2):
                  let (status1, T1, res)  = sempp(P_exp, P_inp, A, e1, inp, s, s_T, res) in
    	    	      if (status1 = success)
		      then (success, prior(s, e(T1), T1, skip(s, s, e2)), res)
    		      else
		          let (status2, T2, res) = sempp(P_exp, P_inp, A, e2, inp, s, s_T, res) in
			  if (status2 = success)
			  then (success, prior(s, e(T2), T1, T2), res)
			  else (failure, fail(s, e(T2)), res)
			  endif
		      endif,
              star(e):
                  let (status0, T0, res) = sempp(P_exp, P_inp, A, e, inp, s, s_T, res) in
                      if (status0 = failure)
		      then (success, star(s, s, T0, skip(e(T0), e(T0), star(e))), res)
    		      else
                          let (status, Ts, res) = sempp(P_exp, P_inp, A, star(e), inp, e(T0), s_T, res) in
                          (success, star(s, e(Ts), T0, Ts), res)
                      endif,
              plus(e):
                  let (status0, T0, res) = sempp(P_exp, P_inp, A, e, inp, s, s_T, res) in
    	    	      if (status0 = failure)
		      then (failure, fail(s, s), res)
    		      else
                          let (status, Ts, res) = sempp(P_exp, P_inp, A, plus(e), inp, e(T0), s_T, res) in
    		          (success, plus(s, e(Ts), T0, Ts), res)
                      endif,
              opt(e):
                  let (status, T, res) = sempp(P_exp, P_inp, A, e, inp, s, s_T, res) in
                      if (status = failure)
		      then (success, opt(s, s, T), res)
     		      else (success, opt(s, e(T), T), res)
                      endif,
              notP(e):
                  let (status, T, res) = sempp(P_exp, P_inp, A, e, inp, s, s_T, res) IN
                      if (status = failure)
		      then (success, notP(s, s, T), res)
		      else (failure, fail(s, s), res)
		      endif,
              andP(e):
                  let (status, T, res) = sempp(P_exp, P_inp, A, e, inp, s, s_T, res) IN
                      if (status = success)
		      then (success, andP(s, s, T), res)
		      else (failure, fail(s, s), res)
		      endif
    ENDCASES
    MEASURE lex4(bound - s_T, bound - s,  A, pegMeasure(G))

END semantic_parser
