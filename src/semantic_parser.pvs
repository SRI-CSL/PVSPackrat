% ————————————————————————————–
% semantic_parser.pvs
%  |– semantic_parser THEORY
%     Defines the semantic packrat parser
% ————————————————————————————–


semantic_parser [
      V_T   : TYPE+,
      <=    : (total_order?[V_T]),
      V_N_b : {k : nat | k > 0},
      bound : posnat,
      V_S   : TYPE
      ]: THEORY
  BEGIN
  IMPORTING peg_parser[V_T, <=, V_N_b, bound, V_S]
  IMPORTING semantic_interp[V_T, <=, V_N_b, bound, V_S]

  b : VAR inp_bound

  % Array for packrat memoization
  saved_result: DATATYPE
    BEGIN
      unknown : unknown?
      known(T : (valuedTree?)) : known?
    END saved_result

  % Type to store results of partial parsing. Maintains equivalence with reference parser
  results(P_exp : WF_nT,
          P_inp : semantic_interp,
  	      inp   : input) : TYPE =
  	   	  { res : [[V_N, inp_bound] -> saved_result] |
		    FORALL (A : V_N, s : upto(bound)) :
		       LET T_p = parsing(P_exp, A, P_exp(A), inp, s, s) IN
  		       known?(res(A,s)) ⇒ ((astType?(T_p) = failure ⇔ T(res(A,s)) = fail    (s(T_p), e(T_p)))
		                          ∧(astType?(T_p) = success ⇔ T(res(A,s)) = semantic(s(T_p), e(T_p), A, P_inp(A, s_inp(P_inp, T_p)))))}


  % Semantic packrat parser - equivalent with reference parser modulo semantic interpretation
  sempp(P_exp : WF_nT,
  	    P_inp : semantic_interp,
  	    A     : below(V_N_b),                   % Current non Terminal
        G     : {e : Δ | subterm(e, P_exp(A))}, % Grammar node
        inp   : input,                          % Input array
  	    s     : upto(bound),                      % Starting index
  	    s_T   : {k : upto(s) | (k=s) ⇒ g_wf(G, A, P_0c?(P_exp), strong)},
  	    res   : results(P_exp, P_inp, inp)) :
      % Recursively computes the tree result and the set of partial results memoizied
      RECURSIVE [{T : pre_ast | T = s_inp(P_inp, parsing(P_exp, A, G, inp, s, s_T))},
	             results(P_exp, P_inp, inp)] =
          CASES G OF
              ε: (s_inp(P_inp, ε(s,s)), res),
              any: (s_inp(P_inp, any(s, min(bound, s+1), inp(s))), res),
              terminal(a): (s_inp(P_inp, terminal(s,  min(bound, s+1), a, inp(s))), res),
              range(a, b): (s_inp(P_inp, range(s, min(bound, s+1), a, b, inp(s))), res),
              nonTerminal(B):
                  if known?(res(B,s)) then (T(res(B, s)), res) % Memoïzed result
     			  else % Need for a new partial parse
  			     let (T_B, resB) = sempp(P_exp, P_inp, B, P_exp(B), inp, s, s, res) in COND
  			       astType?(T_B) = failure -> (fail(s, e(T_B)), resB WITH [(B,s) := known(fail(s, e(T_B)))]),
      		               astType?(T_B) = success ->
    			              let sem_T = semantic(s, e(T_B), B, P_inp(B, T_B)) in
                              (sem_T, resB WITH [(B,s) := known(sem_T)])
  			          ENDCOND
  			      endif,
              seq(e1, e2):
                  let (T1, res1)  = sempp(P_exp, P_inp, A, e1, inp, s, s_T, res) in
    	    	      if (astType?(T1) = failure) then (fail(s, e(T1)), res1)
    		          else
    			          let (T2, res2) = sempp(P_exp, P_inp, A, e2, inp, e(T1), s_T, res1) in
    			          (semppCompact(seq(s, e(T2), T1, T2), G), res2)
    			      endif,
              prior(e1, e2):
                  let (T1, res1)  = sempp(P_exp, P_inp, A, e1, inp, s, s_T, res) IN
    	    	      if (astType?(T1) = success) then (prior(s, e(T1), T1, skip(s, s, e2)), res1)
    		          else
                          LET (T2, res2) = sempp(P_exp, P_inp, A, e2, inp, s, s_T, res1) IN
    			          (semppCompact(prior(s, e(T2), fail(s(T1), e(T1)), T2), G), res2)
    			      endif,
              star(e):
                  let (T0, res0) = sempp(P_exp, P_inp, A, e, inp, s, s_T, res) IN
                      if (astType?(T0) = failure) THEN (star(s, s, T0, skip(e(T0), e(T0), star(e))), res0)
    		          else
                          let (Ts, ress) = sempp(P_exp, P_inp, A, star(e), inp, e(T0), s_T, res0) IN
                          (star(s, e(Ts), T0, Ts), ress)
                      endif,
              plus(e):
                  let (T0, res0) = sempp(P_exp, P_inp, A, e, inp, s, s_T, res) IN
    	    	      if (astType?(T0) = failure) THEN (fail(s, s), res0)
    		          else
                          let (Ts, resp) = sempp(P_exp, P_inp, A, plus(e), inp, e(T0), s_T, res0) IN
    				      (plus(s, e(Ts), T0, Ts), resp)
                      endif,
              opt(e):
                  let (T, reso)  = sempp(P_exp, P_inp, A, e, inp, s, s_T, res) IN
                      if (astType?(T) = failure)  THEN (opt(s, s, T), reso)
     			      else (opt(s, e(T), T), reso)
                      endif,
              notP(e):
                  let (T, resn) = sempp(P_exp, P_inp, A, e, inp, s, s_T, res) IN
                      (semppCompact(notP(s, s, T), G), resn),
              andP(e):
                  let (T, resa) = sempp(P_exp, P_inp, A, e, inp, s, s_T, res) IN
                      (semppCompact(andP(s, s, T), G), resa)
    ENDCASES
    MEASURE lex4(bound - s_T, bound - s,  A, pegMeasure(G))

END semantic_parser
