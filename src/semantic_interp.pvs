% ————————————————————————————–
% semantic_interp.pvs
%  |– semantic_interp THEORY
%     Defines the concept of interpreting the semantic value of a
%     tree. The idea is to use a function that takes trees without
%     nonTerminal nodes (base trees) and recursively call it
%     to replace all nonTerminal trees by their semantic values,
%     starting from the bottom of the tree.
% ————————————————————————————–


semantic_interp [
      V_T   : TYPE+,
      <=    : (total_order?[V_T]),
      V_N_b : {k : nat | k > 0},
      bound : posnat,
      V_S   : TYPE
      ]: THEORY
  BEGIN

  IMPORTING ast[V_T, <=, V_N_b, bound, V_S]
  semantic_interp : TYPE = [V_N, semanticTree -> V_S]
  valuedTree?(T : pre_ast) : bool = semantic?(T) ∨ fail?(T)

  % Function that transforms a tree into its semantic interpretation, recursively
  s_inp(P_inp: semantic_interp, T: pre_ast): RECURSIVE
        {T_p: semanticTree |
           ((skip?(T) ⇔ skip?(T_p)) ∧ (star?(T) ⇔ star?(T_p)) ∧ ((astType?(T) = failure) ⇔ fail?(T_p)) ∧ ((plus?(T) ⇒ (plus?(T_p) ∨ fail?(T_p))))) ∧
            (s(T_p) = s(T)) ∧ (e(T_p) = e(T)) ∧ (astWellformed?(T) ⇒ (astWellformed?(T_p) ∧ (astType?(T_p) = astType?(T))))} =
    IF (astType?(T) = failure) THEN fail(s(T), e(T))
    ELSE CASES T
           OF ε(s, e): T,
              any(s, e, x): T,
              terminal(s, e, x, y): T,
              range(s, e, a, b, x): T,
              nonTerminal(s, e, A, T): semantic(s, e, A, P_inp(A, s_inp(P_inp, T))),
              semantic(s, e, A, S): T,
              seq(s, e, T1, T2): seq(s, e, s_inp(P_inp, T1), s_inp(P_inp, T2)),
              prior(s, e, T1, T2): prior(s, e, s_inp(P_inp, T1), s_inp(P_inp, T2)),
              star(s, e, T0, Ts): star(s, e, s_inp(P_inp, T0), s_inp(P_inp, Ts)),
              plus(s, e, T0, Ts): plus(s, e, s_inp(P_inp, T0), s_inp(P_inp, Ts)),
              opt(s, e, T0): opt(s, e, s_inp(P_inp, T0)),
              notP(s, e, T): notP(s, e, s_inp(P_inp, T)),
              andP(s, e, T): andP(s, e, s_inp(P_inp, T)),
              skip(s, e, G): T
           ENDCASES
    ENDIF
     MEASURE astMeasure(T)


  % Usefull lemmas about semantic interpretation : it maintains most properties
  semantic_interp_bounds  : LEMMA ∀ (T : ast, P_inp : semantic_interp) : (s(T) = s(s_inp(P_inp, T))) ∧ (e(T) = e(s_inp(P_inp, T)))
  semantic_interp_type    : LEMMA ∀ (T : ast, P_inp : semantic_interp) : astType?(T) = astType?(s_inp(P_inp, T))
  semantic_interp_theorem : LEMMA ∀ (T : ast, P_inp : semantic_interp) : astWellformed?(s_inp(P_inp, T))
  semantic_interp_props   : LEMMA ∀ (T : ast, P_inp : semantic_interp) : (s(T) = s(s_inp(P_inp, T))) ∧ (e(T) = e(s_inp(P_inp, T))) ∧ (astType?(T) = astType?(s_inp(P_inp, T))) ∧ astWellformed?(s_inp(P_inp, T))

  semppCompact(T : pre_ast, G : Δ) : pre_ast = IF (astType?(T) = failure) THEN fail(s(T), e(T)) ELSE T ENDIF

END semantic_interp
