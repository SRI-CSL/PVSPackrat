(json_grammar
 (isTotalOrder 0
  (isTotalOrder-1 nil 3786305884
   ("" (expand "total_order?")
    (("" (expand "partial_order?")
      (("" (expand "preorder?")
        (("" (expand "reflexive?")
          (("" (expand "transitive?")
            (("" (expand "antisymmetric?")
              (("" (expand "dichotomous?")
                (("" (expand "<=")
                  (("" (split)
                    (("1" (skeep) (("1" (assert) nil nil)) nil)
                     ("2" (skeep)
                      (("2" (decompose-equality 1) nil nil)) nil)
                     ("3" (skeep) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((partial_order? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (antisymmetric? const-decl "bool" relations nil)
    (<= const-decl "bool" json_grammar nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (character_char_extensionality formula-decl nil character_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dichotomous? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (total_order? const-decl "bool" orders nil))
   shostak))
 (IMP_peg_extented_TCC1 0
  (IMP_peg_extented_TCC2-1 nil 3786305814
   ("" (lemma "isTotalOrder") (("" (propax) nil nil)) nil)
   ((isTotalOrder formula-decl nil json_grammar nil)) nil
   (IMP_peg_extented subtype "json_grammar.<="
    "(orders[V_T].total_order?)")))
 (IMP_peg_extented_TCC2 0
  (IMP_peg_extented_TCC3-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (IMP_peg_extented subtype "json_grammar.V_N_b" "posnat")))
 (ws_TCC1 0
  (ws_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (ws subtype "0" "naturalnumbers.below(json_grammar.V_N_b)")))
 (begin_array_TCC1 0
  (begin_array_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (begin_array subtype "1"
    "naturalnumbers.below(json_grammar.V_N_b)")))
 (begin_object_TCC1 0
  (begin_object_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (begin_object subtype "2"
    "naturalnumbers.below(json_grammar.V_N_b)")))
 (end_array_TCC1 0
  (end_array_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (end_array subtype "3" "naturalnumbers.below(json_grammar.V_N_b)")))
 (end_object_TCC1 0
  (end_object_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (end_object subtype "4"
    "naturalnumbers.below(json_grammar.V_N_b)")))
 (name_separator_TCC1 0
  (name_separator_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (name_separator subtype "5"
    "naturalnumbers.below(json_grammar.V_N_b)")))
 (value_separator_TCC1 0
  (value_separator_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (value_separator subtype "6"
    "naturalnumbers.below(json_grammar.V_N_b)")))
 (J_false_TCC1 0
  (J_false_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (J_false subtype "7" "naturalnumbers.below(json_grammar.V_N_b)")))
 (J_null_TCC1 0
  (J_null_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (J_null subtype "8" "naturalnumbers.below(json_grammar.V_N_b)")))
 (J_true_TCC1 0
  (J_true_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (J_true subtype "9" "naturalnumbers.below(json_grammar.V_N_b)")))
 (J_object_TCC1 0
  (J_object_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (J_object subtype "10" "naturalnumbers.below(json_grammar.V_N_b)")))
 (member_TCC1 0
  (member_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (member subtype "11" "naturalnumbers.below(json_grammar.V_N_b)")))
 (J_array_TCC1 0
  (J_array_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (J_array subtype "12" "naturalnumbers.below(json_grammar.V_N_b)")))
 (value_TCC1 0
  (value_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (value subtype "29" "naturalnumbers.below(json_grammar.V_N_b)")))
 (J_number_TCC1 0
  (J_number_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (J_number subtype "23" "naturalnumbers.below(json_grammar.V_N_b)")))
 (decimal_point_TCC1 0
  (decimal_point_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (decimal_point subtype "14"
    "naturalnumbers.below(json_grammar.V_N_b)")))
 (digit1_9_TCC1 0
  (digit1_9_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (digit1_9 subtype "15" "naturalnumbers.below(json_grammar.V_N_b)")))
 (digit_TCC1 0
  (digit_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (digit subtype "16" "naturalnumbers.below(json_grammar.V_N_b)")))
 (e_TCC1 0
  (e_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (e subtype "17" "naturalnumbers.below(json_grammar.V_N_b)")))
 (exp_TCC1 0
  (exp_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (exp subtype "18" "naturalnumbers.below(json_grammar.V_N_b)")))
 (frac_TCC1 0
  (frac_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (frac subtype "19" "naturalnumbers.below(json_grammar.V_N_b)")))
 (J_int_TCC1 0
  (J_int_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (J_int subtype "20" "naturalnumbers.below(json_grammar.V_N_b)")))
 (J_minus_TCC1 0
  (J_minus_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (J_minus subtype "21" "naturalnumbers.below(json_grammar.V_N_b)")))
 (J_plus_TCC1 0
  (J_plus_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (J_plus subtype "22" "naturalnumbers.below(json_grammar.V_N_b)")))
 (zero_TCC1 0
  (zero_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (zero subtype "13" "naturalnumbers.below(json_grammar.V_N_b)")))
 (quotation_mark_TCC1 0
  (quotation_mark_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (quotation_mark subtype "24"
    "naturalnumbers.below(json_grammar.V_N_b)")))
 (unescaped_TCC1 0
  (unescaped_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (unescaped subtype "25"
    "naturalnumbers.below(json_grammar.V_N_b)")))
 (J_char_TCC1 0
  (J_char_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (J_char subtype "26" "naturalnumbers.below(json_grammar.V_N_b)")))
 (hexdig_TCC1 0
  (hexdig_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (hexdig subtype "27" "naturalnumbers.below(json_grammar.V_N_b)")))
 (J_string_TCC1 0
  (J_string_TCC1-1 nil 3786305814 ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (J_string subtype "28" "naturalnumbers.below(json_grammar.V_N_b)")))
 (correct_grammar 0
  (correct_grammar-1 nil 3786306599
   ("" (expand "strong_WF")
    (("" (skeep)
      (("" (name "P0" "P_0c?(P_exp)")
        (("1" (hide 1)
          (("1" (copy -1)
            (("1" (hide -2)
              (("1" (expand "P_0c?")
                (("1" (expand "nT_properties")
                  (("1" (expand "all_false")
                    (("1"
                      (auto-rewrite-theories
                       ("wf_peg" "peg" "array_sum" "peg_extented"))
                      (("1" (grind)
                        (("1" (reveal - +)
                          (("1" (replace -1 1 LR)
                            (("1" (replace -2 1 RL)
                              (("1"
                                (hide -)
                                (("1"
                                  (expand "strong")
                                  (("1"
                                    (expand "P_exp")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "isTotalOrder") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((isTotalOrder formula-decl nil json_grammar nil)
    (nT_properties const-decl "F(P_exp)" wf_peg nil)
    (strong const-decl "bool" wf_peg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (g_wf def-decl "bool" wf_peg nil)
    (compute_properties def-decl "F(P_exp)" wf_peg nil)
    (array_sum const-decl "upto(3 * V_N_b)" array_sum nil)
    (aux def-decl "result" array_sum nil)
    (r const-decl "C(P_exp)" wf_peg nil)
    (recompute_nonTerminals_properties def-decl "C(P_exp)" wf_peg nil)
    (prior7 const-decl "Δ" peg_extented nil)
    (J_number const-decl "Δ" json_grammar nil)
    (J_array const-decl "Δ" json_grammar nil)
    (J_object const-decl "Δ" json_grammar nil)
    (J_true const-decl "Δ" json_grammar nil)
    (J_null const-decl "Δ" json_grammar nil)
    (J_false const-decl "Δ" json_grammar nil)
    (J_char const-decl "Δ" json_grammar nil)
    (quotation_mark const-decl "Δ" json_grammar nil)
    (prior9 const-decl "Δ" peg_extented nil)
    (hexdig4 const-decl "Δ" json_grammar nil)
    (hexdig const-decl "Δ" json_grammar nil)
    (escape const-decl "Δ" json_grammar nil)
    (unescaped const-decl "Δ" json_grammar nil)
    (prior3 const-decl "Δ" peg_extented nil)
    (seq4 const-decl "Δ" peg_extented nil)
    (exp const-decl "Δ" json_grammar nil)
    (frac const-decl "Δ" json_grammar nil)
    (J_int const-decl "Δ" json_grammar nil)
    (digit1_9 const-decl "Δ" json_grammar nil)
    (zero const-decl "Δ" json_grammar nil)
    (decimal_point const-decl "Δ" json_grammar nil)
    (digit const-decl "Δ" json_grammar nil)
    (J_plus const-decl "Δ" json_grammar nil)
    (J_minus const-decl "Δ" json_grammar nil)
    (e const-decl "Δ" json_grammar nil)
    (end_array const-decl "Δ" json_grammar nil)
    (begin_array const-decl "Δ" json_grammar nil)
    (end_object const-decl "Δ" json_grammar nil)
    (value_separator const-decl "Δ" json_grammar nil)
    (value const-decl "Δ" json_grammar nil)
    (name_separator const-decl "Δ" json_grammar nil)
    (J_string const-decl "Δ" json_grammar nil)
    (begin_object const-decl "Δ" json_grammar nil)
    (string const-decl "Δ" peg_extented nil)
    (string_aux def-decl "Δ" peg_extented nil)
    (nth def-decl "T" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (seq3 const-decl "Δ" peg_extented nil)
    (ws const-decl "Δ" json_grammar nil)
    (ρ const-decl "C(P_exp)" wf_peg nil)
    (g_props def-decl "[bool, bool, bool]" wf_peg nil)
    (prior4 const-decl "Δ" peg_extented nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (all_false const-decl "nTpred" wf_peg nil)
    (> const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (V_T type-eq-decl nil json_grammar nil)
    (char type-eq-decl nil strings nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" json_grammar nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (V_N_b const-decl "nat" json_grammar nil)
    (peg type-decl nil peg nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (interp type-eq-decl nil wf_peg nil)
    (P_0c? const-decl "[Δ -> bool]" wf_peg nil)
    (below type-eq-decl nil naturalnumbers nil)
    (P_exp const-decl "Δ" json_grammar nil)
    (strong_WF const-decl "bool" wf_peg nil))
   shostak)))
(json_object)
(json_parser
 (IMP_semantic_tlparser_TCC1 0
  (IMP_semantic_tlparser_TCC1-1 nil 3805393714
   ("" (inst 1 "char(0)") nil nil)
   ((char adt-constructor-decl "[below[256] -> (char?)]" character_adt
          nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (V_T type-eq-decl nil json_grammar nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil))
   nil (IMP_semantic_tlparser existence "" "V_T")))
 (IMP_semantic_tlparser_TCC2 0
  (IMP_semantic_tlparser_TCC2-1 nil 3805351806
   ("" (lemma "isTotalOrder") (("" (propax) nil nil)) nil)
   ((isTotalOrder formula-decl nil json_grammar nil)) nil
   (IMP_semantic_tlparser subtype "json_grammar.<="
    "(orders[V_T].total_order?)")))
 (IMP_semantic_tlparser_TCC3 0
  (IMP_semantic_tlparser_TCC3-1 nil 3805351806
   ("" (subtype-tcc) nil nil)
   ((V_N_b const-decl "nat" json_grammar nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (IMP_semantic_tlparser subtype "json_grammar.V_N_b"
    "{k: naturalnumbers.nat | reals.>(k, 0)}")))
 (charToInt_TCC1 0
  (charToInt_TCC1-1 nil 3797853245 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (charToInt disjointness "TABLE
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+------------------------------------------------------------------------++
  |[ json_parser.x = 48 | json_parser.x = 49 | json_parser.x = 50 | json_parser.x = 51 | json_parser.x = 52 | json_parser.x = 53 | json_parser.x = 54 | json_parser.x = 55 | json_parser.x = 56 | json_parser.x = 57 | booleans.∨((reals.<(json_parser.x, 48)), (reals.>(json_parser.x, 57))) ]|
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+------------------------------------------------------------------------++
  | 0                   | 1                  | 2                  | 3                  | 4                  | 5                  | 6                  | 7                  | 8                  | 9                  | 0                                                                      ||
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+------------------------------------------------------------------------++
ENDTABLE" "nil")))
 (charToInt_TCC2 0
  (charToInt_TCC2-1 nil 3797853245 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (charToInt coverage "TABLE
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+------------------------------------------------------------------------++
  |[ json_parser.x = 48 | json_parser.x = 49 | json_parser.x = 50 | json_parser.x = 51 | json_parser.x = 52 | json_parser.x = 53 | json_parser.x = 54 | json_parser.x = 55 | json_parser.x = 56 | json_parser.x = 57 | booleans.∨((reals.<(json_parser.x, 48)), (reals.>(json_parser.x, 57))) ]|
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+------------------------------------------------------------------------++
  | 0                   | 1                  | 2                  | 3                  | 4                  | 5                  | 6                  | 7                  | 8                  | 9                  | 0                                                                      ||
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+------------------------------------------------------------------------++
ENDTABLE" "nil")))
 (astToInt_aux_TCC1 0
  (astToInt_aux_TCC1-1 nil 3797853245 ("" (subtype-tcc) nil nil) nil
   nil
   (astToInt_aux subtype "json_parser.T"
    "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].star?(x), booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].plus?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].opt?(x)))}")))
 (astToInt_aux_TCC2 0
  (astToInt_aux_TCC2-1 nil 3797853245 ("" (subtype-tcc) nil nil) nil
   nil
   (astToInt_aux subtype
    "pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T0(json_parser.T)"
    "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].nonTerminal?(x), booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].notP?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].andP?(x)))}")))
 (astToInt_aux_TCC3 0
  (astToInt_aux_TCC3-1 nil 3797853245 ("" (subtype-tcc) nil nil) nil
   nil
   (astToInt_aux subtype "json_parser.T"
    "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].star?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].plus?(x))}")))
 (astToInt_aux_TCC4 0
  (astToInt_aux_TCC5-1 nil 3797853245 ("" (subtype-tcc) nil nil) nil
   nil
   (astToInt_aux subtype
    "pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T0(json_parser.T))"
    "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].any?(x), booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].terminal?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].range?(x)))}")))
 (astToInt_aux_TCC5 0
  (astToInt_aux_TCC6-1 nil 3797853245 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (in_range const-decl "bool" ast nil)
    (astType? def-decl "astType" ast nil)
    (reduce_nat adt-def-decl "[pre_ast -> nat]" pre_ast nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (V_S type-eq-decl nil json_parser nil)
    (JSON type-decl nil json_object nil)
    (V_N_b const-decl "nat" json_grammar nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (<= const-decl "bool" json_grammar nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (char type-eq-decl nil strings nil)
    (V_T type-eq-decl nil json_grammar nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (astMeasure const-decl "nat" pre_ast nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (astToInt_aux termination
    "json_parser.astToInt_aux(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].Ts(json_parser.T), (number_fields.+)(number_fields.*(10, json_parser.res), json_parser.charToInt(character_adt.code(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].x(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T0(json_parser.T)))))))"
    "nil")))
 (astToInt_aux_TCC6 0
  (astToInt_aux_TCC7-1 nil 3797853245 ("" (subtype-tcc) nil nil) nil
   nil
   (astToInt_aux subtype "json_parser.T"
    "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].star?(x), booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].plus?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].opt?(x)))}")))
 (astToInt_aux_TCC7 0
  (astToInt_aux_TCC8-1 nil 3797853245 ("" (cond-disjoint-tcc) nil nil)
   nil nil
   (astToInt_aux disjointness
    "COND booleans.∧((booleans.∨(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].plus?(json_parser.T), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].star?(json_parser.T))), (booleans.∧((ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].astType?(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T0(json_parser.T)) = ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].success), booleans.∧((pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].nonTerminal?(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T0(json_parser.T))), (pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].range?(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T0(json_parser.T)))))))) -> json_parser.astToInt_aux(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].Ts(json_parser.T), (number_fields.+)(number_fields.*(10, json_parser.res), json_parser.charToInt(character_adt.code(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].x(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T0(json_parser.T))))))), booleans.∨((booleans.∧(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].star?(json_parser.T), (pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].fail?(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T0(json_parser.T))))), (pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].fail?(json_parser.T))) -> json_parser.res, ELSE -> 0 ENDCOND"
    "nil")))
 (P_inp_TCC1 0
  (P_inp_TCC5-1 nil 3798634225 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (V_N_b const-decl "nat" json_grammar nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (V_T type-eq-decl nil json_grammar nil)
    (char type-eq-decl nil strings nil)
    (<= const-decl "bool" json_grammar nil)
    (JSON type-decl nil json_object nil)
    (V_S type-eq-decl nil json_parser nil)
    (pre_ast type-decl nil pre_ast nil)
    (semanticTree? const-decl "bool" pre_ast nil)
    (semanticTree type-eq-decl nil pre_ast nil))
   nil
   (P_inp subtype "json_parser.T"
    "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].seq?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].prior?(x))}")))
 (P_inp_TCC2 0
  (P_inp_TCC6-1 nil 3798634225 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (V_N_b const-decl "nat" json_grammar nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (V_T type-eq-decl nil json_grammar nil)
    (char type-eq-decl nil strings nil)
    (<= const-decl "bool" json_grammar nil)
    (JSON type-decl nil json_object nil)
    (V_S type-eq-decl nil json_parser nil)
    (pre_ast type-decl nil pre_ast nil)
    (semanticTree? const-decl "bool" pre_ast nil)
    (semanticTree type-eq-decl nil pre_ast nil))
   nil
   (P_inp subtype
    "pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T2(json_parser.T)"
    "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].seq?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].prior?(x))}")))
 (P_inp_TCC3 0
  (P_inp_TCC7-1 nil 3798634225
   ("" (skeep)
    (("" (typepred "T")
      (("" (expand "astWellformed?" -1)
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              (("" (lemma "Wellformed_theorem")
                (("" (inst -1 "T1(T)")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand "astWellformed?" -7)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (lemma "isTotalOrder")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ast type-eq-decl nil ast nil)
    (astWellformed? def-decl "bool" ast nil)
    (pre_ast type-decl nil pre_ast nil)
    (JSON type-decl nil json_object nil)
    (V_N_b const-decl "nat" json_grammar nil)
    (<= const-decl "bool" json_grammar nil)
    (V_T type-eq-decl nil json_grammar nil)
    (seq? adt-recognizer-decl "[pre_ast -> boolean]" pre_ast nil)
    (prior? adt-recognizer-decl "[pre_ast -> boolean]" pre_ast nil)
    (skip? adt-recognizer-decl "[pre_ast -> boolean]" pre_ast nil)
    (T1 shared-adt-accessor-decl
     "[{x: pre_ast | seq?(x) OR prior?(x)} -> {T: pre_ast | ¬skip?(T)}]"
     pre_ast nil)
    (isTotalOrder formula-decl nil json_grammar nil)
    (Wellformed_theorem formula-decl nil ast nil))
   nil
   (P_inp subtype "json_parser.T" "ast[V_T, <=, V_N_b, 1000, V_S]")))
 (tlresult_TCC1 0
  (tlresult_TCC1-1 nil 3805351806
   ("" (lemma "correct_grammar") (("" (propax) nil nil)) nil)
   ((correct_grammar formula-decl nil json_grammar nil)) nil
   (tlresult subtype "json_grammar.P_exp" "WF_nT[V_T, <=, V_N_b]")))
 (tlresult_TCC2 0
  (tlresult_TCC2-1 nil 3805351806
   ("" (assert)
    (("" (expand "entry")
      (("" (assert) (("" (expand "V_N_b") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((entry const-decl "int" json_grammar nil)
    (V_N_b const-decl "nat" json_grammar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (tlresult subtype "json_grammar.entry"
    "naturalnumbers.below(json_grammar.V_N_b)")))
 (tlresult_TCC3 0
  (tlresult_TCC3-1 nil 3805351806
   ("" (expand "subterm") (("" (propax) nil nil)) nil)
   ((subterm adt-def-decl "boolean" peg nil)) nil
   (tlresult subtype "json_grammar.P_exp(json_grammar.entry)"
    "{e: wf_peg[V_T, json_grammar.<=, json_grammar.V_N_b].Δ | peg[V_T, json_grammar.<=, json_grammar.V_N_b].subterm(e, json_grammar.P_exp(json_grammar.entry))}")))
 (tlresult_TCC4 0
  (tlresult_TCC4-1 nil 3805351806
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (tlresult subtype
    "(LAMBDA (A: nTpred_order[json_grammar.V_N_b].V_N, s: ast_props[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].inp_bound): semantic_parser[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].unknown)"
    "semantic_parser[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].results(json_grammar.P_exp, json_parser.P_inp, json_parser.strToInp(json_parser.str))"))))

