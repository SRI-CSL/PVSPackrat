("ast" ast seq_2_TCC1 0 (seq_2_TCC1-1 nil 3785499487 ("" (subtype-tcc) nil nil) nil nil (seq_2 subtype "ast.T" "{x: pre_ast[ast.V_T, ast.<=, ast.V_N_b, ast.bound, ast.V_S].pre_ast | booleans.OR(pre_ast[ast.V_T, ast.<=, ast.V_N_b, ast.bound, ast.V_S].seq?(x), pre_ast[ast.V_T, ast.<=, ast.V_N_b, ast.bound, ast.V_S].prior?(x))}")))("ast" ast seq_2 0 (seq_2-1 nil 3785499490 ("" (skeep) (("" (typepred "T") (("" (expand "astWellformed?") (("" (assert) (("" (flatten) (("" (assert) (("" (expand "astType?" 2 1) (("" (lift-if 2) (("" (split 2) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((ast type-eq-decl nil ast nil) (astWellformed? def-decl "bool" ast nil) (pre_ast type-decl nil pre_ast nil) (V_S formal-type-decl nil ast nil) (bound formal-const-decl "nat" ast nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (V_N_b formal-const-decl "posnat" ast nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (<= formal-const-decl "(total_order?[V_T])" ast nil) (total_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (V_T formal-nonempty-type-decl nil ast nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (astType? def-decl "astType" ast nil)) shostak))("json" json_parser extract_number_TCC1 0 (extract_number_TCC1-1 nil 3786428596 ("" (skeep) (("" (ground) nil nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (extract_number disjointness "TABLE
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------------------------------------------------------++
  |[ json_parser.x = 48 | json_parser.x = 49 | json_parser.x = 50 | json_parser.x = 51 | json_parser.x = 52 | json_parser.x = 53 | json_parser.x = 54 | json_parser.x = 55 | json_parser.x = 56 | json_parser.x = 57 | booleans.∨(reals.<(json_parser.x, 48), reals.>(json_parser.x, 57)) ]|
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------------------------------------------------------++
  | 0                   | 1                  | 2                  | 3                  | 4                  | 5                  | 6                  | 7                  | 8                  | 9                  | 0                                                                  ||
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------------------------------------------------------++
ENDTABLE" "nil")))("json" json_parser extract_number_TCC2 0 (extract_number_TCC2-1 nil 3786428596 ("" (skeep) (("" (assert) nil nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (extract_number coverage "TABLE
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------------------------------------------------------++
  |[ json_parser.x = 48 | json_parser.x = 49 | json_parser.x = 50 | json_parser.x = 51 | json_parser.x = 52 | json_parser.x = 53 | json_parser.x = 54 | json_parser.x = 55 | json_parser.x = 56 | json_parser.x = 57 | booleans.∨(reals.<(json_parser.x, 48), reals.>(json_parser.x, 57)) ]|
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------------------------------------------------------++
  | 0                   | 1                  | 2                  | 3                  | 4                  | 5                  | 6                  | 7                  | 8                  | 9                  | 0                                                                  ||
  %---------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------------------------------------------------------++
ENDTABLE" "nil")))("parser" peg_parser tree_is_parsing_TCC1 0 (tree_is_parsing_TCC1-1 nil 3788207491 ("" (subtype-tcc) nil nil) nil nil (tree_is_parsing subtype "peg_parser.s" "{k: naturalnumbers.upto(peg_parser.s) | booleans.⇒((k = peg_parser.s), wf_peg[peg_parser.V_T, peg_parser.<=, peg_parser.V_N_b].g_wf(peg_parser.G, peg_parser.A, wf_peg[peg_parser.V_T, peg_parser.<=, peg_parser.V_N_b].P_0c?(peg_parser.P_exp), wf_peg[peg_parser.V_T, peg_parser.<=, peg_parser.V_N_b].strong))}")))("parser" peg_parser tree_is_parsing 0 (tree_is_parsing-1 nil 3788207599 ("" (case "Forall (n: nat) : FORALL (T: ast): astMeasure(T) <= n Implies ( 
        EXISTS (P_exp: WF_nT, A: below(V_N_b),
                G: {e: Δ | subterm(e, P_exp(A))}, inp: input, s: inp_bound,
                s_T:
                  {k: upto(s) |
                     (k = s) ⇒ g_wf(G, A, P_0c?(P_exp), strong)}):
          T = parsing(P_exp, A, G, inp, s, s))") (("1" (skeep) (("1" (inst -1 "astMeasure(T)") (("1" (inst -1 "T") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (induct "n") (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil) ("3" (postpone) nil nil)) nil) nil shostak))("ascii" test_ascii P_exp_TCC1 0 (P_exp_TCC1-1 nil 3785834693 ("" (assert) (("" (inst 1 "0") nil nil)) nil) ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (V_T type-eq-decl nil arith_expr nil)) nil (P_exp existence "" "V_T")))("ascii" test_ascii P_exp_TCC2 0 (P_exp_TCC1-1 nil 3780642089 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (P_exp subtype "arith_expr.V_N_b" "posnat")))("ascii" test_ascii P_exp_TCC3 0 (P_exp_TCC17-1 nil 3785828602 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "8" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC4 0 (P_exp_TCC2-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "1" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC5 0 (P_exp_TCC7-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "0" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC6 0 (P_exp_TCC5-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "2" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC7 0 (P_exp_TCC13-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "2" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC8 0 (P_exp_TCC6-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "4" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC9 0 (P_exp_TCC4-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "3" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC10 0 (P_exp_TCC9-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "2" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC11 0 (P_exp_TCC11-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "5" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC12 0 (P_exp_TCC12-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "5" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC13 0 (P_exp_TCC1-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "7" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC14 0 (P_exp_TCC10-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "6" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC15 0 (P_exp_TCC15-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "4" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC16 0 (P_exp_TCC8-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "3" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC17 0 (P_exp_TCC3-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "1" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC18 0 (P_exp_TCC14-1 nil 3780633797 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "0" "naturalnumbers.below(arith_expr.V_N_b)")))("ascii" test_ascii P_exp_TCC19 0 (P_exp_TCC19-1 nil 3785834693 ("" (subtype-tcc) nil nil) ((V_N_b const-decl "nat" arith_expr nil)) nil (P_exp subtype "8" "naturalnumbers.below(arith_expr.V_N_b)")))("json" json_parser extractJsonNumber_TCC1 0 (extractJsonNumber_TCC1-1 nil 3797853245 ("" (subtype-tcc) nil nil) ((V_T type-eq-decl nil json_grammar nil) (<= const-decl "bool" json_grammar nil) (V_N_b const-decl "nat" json_grammar nil) (JSON type-decl nil json_object nil) (pre_ast type-decl nil pre_ast nil) (astWellformed? def-decl "bool" ast nil) (ast type-eq-decl nil ast nil)) nil (extractJsonNumber subtype "json_parser.T" "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].seq?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].prior?(x))}")))("json" json_parser extractJsonNumber_TCC2 0 (extractJsonNumber_TCC2-1 nil 3797853245 ("" (subtype-tcc) nil nil) ((V_T type-eq-decl nil json_grammar nil) (<= const-decl "bool" json_grammar nil) (V_N_b const-decl "nat" json_grammar nil) (JSON type-decl nil json_object nil) (pre_ast type-decl nil pre_ast nil) (astWellformed? def-decl "bool" ast nil) (ast type-eq-decl nil ast nil)) nil (extractJsonNumber subtype "pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T2(json_parser.T)" "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].seq?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].prior?(x))}")))("json" json_parser extractJsonNumber_TCC3 0 (extractJsonNumber_TCC3-1 nil 3797853245 ("" (subtype-tcc) nil nil) ((V_T type-eq-decl nil json_grammar nil) (<= const-decl "bool" json_grammar nil) (V_N_b const-decl "nat" json_grammar nil) (JSON type-decl nil json_object nil) (pre_ast type-decl nil pre_ast nil) (astWellformed? def-decl "bool" ast nil) (ast type-eq-decl nil ast nil)) nil (extractJsonNumber subtype "pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T2(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T2(json_parser.T))" "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].seq?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].prior?(x))}")))("json" json_parser extractJsonNumber_TCC4 0 (extractJsonNumber_TCC4-1 nil 3797853245 ("" (subtype-tcc) nil nil) nil nil (extractJsonNumber subtype "pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T1(json_parser.T)" "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].nonTerminal?(x), booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].notP?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].andP?(x)))}")))("json" json_parser extractJsonNumber_TCC5 0 (extractJsonNumber_TCC5-1 nil 3797853245 ("" (subtype-tcc) nil nil) nil nil (extractJsonNumber subtype "json_parser.intAST" "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].seq?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].prior?(x))}")))("json" json_parser extractJsonNumber_TCC6 0 (extractJsonNumber_TCC6-1 nil 3797853245 ("" (subtype-tcc) nil nil) nil nil (extractJsonNumber subtype "pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T2(json_parser.intAST)" "ast[V_T, <=, V_N_b, 1000, V_S]")))("json" json_parser extractJsonNumber_TCC7 0 (extractJsonNumber_TCC7-1 nil 3797853245 ("" (subtype-tcc) nil nil) nil nil (extractJsonNumber subtype "json_parser.fracAST" "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].nonTerminal?(x), booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].notP?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].andP?(x)))}")))("json" json_parser extractJsonNumber_TCC8 0 (extractJsonNumber_TCC8-1 nil 3797853245 ("" (subtype-tcc) nil nil) nil nil (extractJsonNumber subtype "pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T(json_parser.fracAST)" "ast[V_T, <=, V_N_b, 1000, V_S]")))("json" json_parser extractJsonNumber_TCC9 0 (extractJsonNumber_TCC9-1 nil 3797853245 ("" (subtype-tcc) nil nil) nil nil (extractJsonNumber subtype "json_parser.expAST" "{x: pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].pre_ast | booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].nonTerminal?(x), booleans.OR(pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].notP?(x), pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].andP?(x)))}")))("json" json_parser extractJsonNumber_TCC10 0 (extractJsonNumber_TCC10-1 nil 3797853245 ("" (subtype-tcc) nil nil) nil nil (extractJsonNumber subtype "pre_ast[V_T, json_grammar.<=, json_grammar.V_N_b, 1000, json_parser.V_S].T(json_parser.expAST)" "ast[V_T, <=, V_N_b, 1000, V_S]")))