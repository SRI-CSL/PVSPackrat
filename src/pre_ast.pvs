
% ————————————————————————————–
% pre_ast.pvs
%  |– pre_ast THEORY
%     Defines a raw abstract syntax tree type and a measure
% ————————————————————————————–


pre_ast [
     V_T   : TYPE+,                % Type of non-terminals
     <=    : (total_order?[V_T]),  % Order on the non-terminals, needed for the range [a-z]
     V_N_b : {k : nat | k > 0},    % Bound for the number of non terminals
     bound : nat,                  % Bound for the input, used for termination
     V_S   : TYPE ]:               % Type of semantic values
     THEORY
  BEGIN

  IMPORTING wf_peg[V_T, <=, V_N_b]
  below: TYPE = upto(bound)
  s, e: VAR below

  pre_ast: DATATYPE
    BEGIN
      skip(s, e: below, G: Δ): skip?
      fail(s, e: below): fail?
      ε(s, e: below): ε?
      any(s, e: below, x: V_T): any?
      terminal(s, e: below, a: V_T, x: V_T): terminal?
      range(s, e: below, a, b: V_T, x: V_T): range?
      nonTerminal(s, e: below, A: V_N, T: {T: pre_ast | ¬skip?(T)})
                 : nonTerminal?
      semantic(s, e: below, A: V_N, S: V_S): semantic?
      seq(s, e: below, T1: {T: pre_ast | ¬skip?(T)}, T2: pre_ast): seq?
      prior(s, e: below, T1: {T: pre_ast | ¬skip?(T)}, T2: pre_ast)
           : prior?
      star(s, e: below, T0: {T: pre_ast | ¬skip?(T)},
           Ts: {T: pre_ast | skip?(T) OR star?(T)})
          : star?
      plus(s, e: below, T0: {T: pre_ast | ¬skip?(T)},
           Ts: {T: pre_ast | skip?(T) OR plus?(T) OR fail?(T)})
          : plus?
      opt(s, e: below, T0: {T: pre_ast | ¬skip?(T)}): opt?
      notP(s, e: below, T: {T: pre_ast | ¬skip?(T)}): notP?
      andP(s, e: below, T: {T: pre_ast | ¬skip?(T)}): andP?
    END pre_ast

  T, T_p, T2: VAR pre_ast
	T_ns : VAR {T: pre_ast | ¬skip?(T)}

  semanticTree?(T) : bool = ∀ T_p : subterm(T_p, T) ⇒ ¬nonTerminal?(T_p)
  semanticTree : TYPE = (semanticTree?)
  parseTree?   (T) : bool = ∀ T_p : subterm(T_p, T) ⇒ ¬fail?(T_p)
  parseTree : TYPE = (parseTree?)

  i, j : VAR nat
  x, a, b : var V_T
  A : var V_N
  S : var V_S
  G : var Δ
  astMeasure(T): nat =
      reduce_nat((LAMBDA (s, e, G): 0), (LAMBDA (s, e): 0),
                 (LAMBDA (s, e): 0), (LAMBDA (s, e, a): 0),
                 (LAMBDA (s, e, a, x): 0), (LAMBDA (s, e, a, b, x): 0),
                 (LAMBDA (s, e, A, i): i + 1), (LAMBDA (s, e, A, S): 1),
                 (LAMBDA (s, e, i, j): i + j + 1),
                 (LAMBDA (s, e, i, j): i + j + 1),
                 (LAMBDA (s, e, i, j): i + j + 1),
                 (LAMBDA (s, e, i, j): i + j + 2),
                 (LAMBDA (s, e, i): i + 2), (LAMBDA (s, e, i): i + 1),
                 (LAMBDA (s, e, i): i + 2))
                (T)

  % Technical rewrites
	semanticTree_skip: LEMMA ∀ s, e, G: semanticTree?(skip(s,e,G)) = TRUE
	semanticTree_fail: LEMMA ∀ s, e: semanticTree?(fail(s,e)) = TRUE
	semanticTree_ε: LEMMA ∀ s, e: semanticTree?(ε(s,e)) = TRUE
	semanticTree_any: LEMMA ∀ s, e, x: semanticTree?(any(s,e,x)) = TRUE
	semanticTree_terminal: LEMMA ∀ s, e, a, x: semanticTree?(terminal(s,e,a,x)) = TRUE
	semanticTree_range: LEMMA ∀ s, e, a, b, x: semanticTree?(range(s,e,a,b,x)) = TRUE
	semanticTree_nonTerminal: LEMMA ∀ s, e, A, T_ns: semanticTree?(nonTerminal(s,e,A,T_ns)) = FALSE
	semanticTree_semantic: LEMMA ∀ s, e, A, S: semanticTree?(semantic(s,e,A,S)) = TRUE
	semanticTree_seq: LEMMA ∀ s, e, T_ns, T2: semanticTree?(seq(s,e,T_ns,T2)) = (semanticTree?(T_ns) ∧ semanticTree?(T2))
	semanticTree_prior: LEMMA ∀ s, e, T_ns, T2: semanticTree?(prior(s,e,T_ns,T2)) = (semanticTree?(T_ns) ∧ semanticTree?(T2))
	semanticTree_star: LEMMA ∀ s, e, T_ns, (Ts: {T:pre_ast | skip?(T) OR star?(T)}): semanticTree?(star(s,e,T_ns,Ts)) = (semanticTree?(T_ns) ∧ semanticTree?(Ts))
	semanticTree_plus: LEMMA ∀ s, e, T_ns, (Ts: {T:pre_ast | skip?(T) OR plus?(T)}): semanticTree?(plus(s,e,T_ns,Ts)) = (semanticTree?(T_ns) ∧ semanticTree?(Ts))
	semanticTree_opt: LEMMA ∀ s, e, T_ns: semanticTree?(opt(s,e,T_ns)) = semanticTree?(T_ns)
	semanticTree_notP: LEMMA ∀ s, e, T_ns: semanticTree?(notP(s,e,T_ns)) = semanticTree?(T_ns)
	semanticTree_andP: LEMMA ∀ s, e, T_ns: semanticTree?(andP(s,e,T_ns)) = semanticTree?(T_ns)

  AUTO_REWRITE+ semanticTree_skip, semanticTree_fail, semanticTree_ε,
                semanticTree_any, semanticTree_terminal,
                semanticTree_range, semanticTree_nonTerminal,
                semanticTree_semantic, semanticTree_seq,
                semanticTree_prior, semanticTree_star, semanticTree_plus,
                semanticTree_opt, semanticTree_notP, semanticTree_andP

END pre_ast
