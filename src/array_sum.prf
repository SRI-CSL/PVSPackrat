(array_sum
 (aux_TCC1 0
  (aux_TCC1-1 nil 3770154866 ("" (subtype-tcc) nil nil) nil nil
   (aux subtype
    "(number_fields.-)((number_fields.-)(array_sum.V_N_b, array_sum.i), 1)"
    "nat")))
 (aux_TCC2 0
  (aux_TCC2-1 nil 3770154866 ("" (subtype-tcc) nil nil)
   ((V_N type-eq-decl nil nTpred_order nil)) nil
   (aux subtype "array_sum.res" "result")))
 (aux_TCC3 0
  (aux_TCC3-1 nil 3770154866 ("" (subtype-tcc) nil nil)
   ((V_N type-eq-decl nil nTpred_order nil)) nil
   (aux subtype "(number_fields.-)(array_sum.i, 1)" "V_N[V_N_b]")))
 (aux_TCC4 0
  (aux_TCC4-1 nil 3770154866 ("" (subtype-tcc) nil nil)
   ((V_N type-eq-decl nil nTpred_order nil)) nil
   (aux subtype "array_sum.res"
    "naturalnumbers.upto((number_fields.-)(array_sum.V_N_b, array_sum.i))")))
 (aux_TCC5 0
  (aux_TCC5-1 nil 3770154866 ("" (termination-tcc) nil nil) nil nil
   (aux termination
    "array_sum.aux((number_fields.-)(array_sum.i, 1), array_sum.res, array_sum.Pf)"
    "nil")))
 (array_sum_TCC1 0
  (array_sum_TCC1-1 nil 3770154866 ("" (subtype-tcc) nil nil) nil nil
   (array_sum subtype "(number_fields.-)(array_sum.V_N_b, 1)"
    "V_N[V_N_b]")))
 (array_sum_TCC2 0
  (array_sum_TCC2-1 nil 3770154866 ("" (subtype-tcc) nil nil) nil nil
   (array_sum subtype
    "(number_fields.+)((number_fields.+)(array_sum.aux((number_fields.-)(array_sum.V_N_b, 1), 0, array_sum.P`1), array_sum.aux((number_fields.-)(array_sum.V_N_b, 1), 0, array_sum.P`2)), array_sum.aux((number_fields.-)(array_sum.V_N_b, 1), 0, array_sum.P`3))"
    "naturalnumbers.upto(number_fields.*(3, array_sum.V_N_b))")))
 (aux_gr 0
  (aux_gr-1 nil 3770390470
   ("" (skolem 1 ("Pf" "_" "_" "_"))
    (("" (induct "i")
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "aux")
            (("1" (assert)
              (("1" (case "Pf(0)")
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 "i")
        (("2" (flatten)
          (("2" (skeep)
            (("2" (expand "aux" 1)
              (("2" (inst-cp -2 "res1" "res2")
                (("2" (inst-cp -2 "res1+1" "res2+1")
                  (("2" (case "Pf(1+i)")
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nTpred type-eq-decl nil nTpred_order nil)
    (result type-eq-decl nil array_sum nil)
    (aux def-decl "result" array_sum nil)
    (V_N_b formal-const-decl "posnat" array_sum nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak))
 (aux_gr2 0
  (aux_gr2-1 nil 3770390677
   ("" (skolem 1 ("Pf" "P0" "_" "_"))
    (("" (induct "i")
      (("1" (expand "aux")
        (("1" (flatten) (("1" (skeep) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (skolem 1 "i")
        (("2" (flatten)
          (("2" (skeep)
            (("2" (expand "aux" 1)
              (("2" (assert)
                (("2" (inst-cp -2 "res")
                  (("2" (inst -2 "res+1")
                    (("2" (lemma "aux_gr")
                      (("2" (inst -1 "P0" "i" "res" "res+1")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nTpred type-eq-decl nil nTpred_order nil)
    (<= const-decl "bool" nTpred_order nil)
    (result type-eq-decl nil array_sum nil)
    (aux def-decl "result" array_sum nil)
    (V_N_b formal-const-decl "posnat" array_sum nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (leq_pred const-decl "bool" nTpred_order nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (aux_gr formula-decl nil array_sum nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (aux_gr3_TCC1 0
  (aux_gr3_TCC1-1 nil 3770402829 ("" (subtype-tcc) nil nil) nil nil
   (aux_gr3 subtype "(number_fields.+)(array_sum.res, array_sum.k)"
    "naturalnumbers.upto((number_fields.+)((number_fields.-)(-1, array_sum.i), array_sum.V_N_b))")))
 (aux_gr3 0
  (aux_gr3-1 nil 3770402830
   ("" (induct "i")
    (("1" (flatten)
      (("1" (skeep)
        (("1" (expand "aux")
          (("1" (case "Pf(0)")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "i")
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand "aux" 1)
            (("2" (case "Pf(i+1)")
              (("1" (assert)
                (("1" (inst -3 "Pf" "1+res" "k")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (inst -2 "Pf" "res" "k") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nTpred type-eq-decl nil nTpred_order nil)
    (V_N type-eq-decl nil nTpred_order nil))
   shostak))
 (aux_gr4_TCC1 0
  (aux_gr4_TCC2-1 nil 3770405621 ("" (subtype-tcc) nil nil) nil nil
   (aux_gr4 subtype "array_sum.res"
    "naturalnumbers.upto((number_fields.+)((number_fields.-)(-1, array_sum.i), array_sum.V_N_b))")))
 (aux_gr4_TCC2 0
  (aux_gr4_TCC1-1 nil 3770405621 ("" (subtype-tcc) nil nil) nil nil
   (aux_gr4 subtype "(number_fields.+)(array_sum.i, array_sum.k)"
    "V_N[V_N_b]")))
 (aux_gr4 0
  (aux_gr4-1 nil 3770405622
   ("" (skolem 1 ("Pf" "_" "_" "_"))
    (("" (skolem 1 ("i" "_" "_"))
      (("" (induct "k")
        (("1" (flatten) (("1" (assert) nil nil)) nil)
         ("2" (skolem 1 "k")
          (("2" (flatten)
            (("2" (skeep)
              (("2" (assert)
                (("2" (expand "aux" 1 2)
                  (("2" (lift-if 1)
                    (("2" (split 1)
                      (("1" (flatten)
                        (("1" (lemma "aux_gr3")
                          (("1" (inst -1 "Pf" "i+k" "res" "1")
                            (("1" (replace -1 1 LR)
                              (("1"
                                (inst -4 "res")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (flatten) (("2" (inst -2 "res") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((V_N type-eq-decl nil nTpred_order nil)
    (nTpred type-eq-decl nil nTpred_order nil))
   shostak))
 (aux_inj 0
  (aux_inj-1 nil 3770408143
   ("" (skeep)
    (("" (case "NOT EXISTS i : P0(i) AND (NOT Pf(i))")
      (("1" (decompose-equality 2)
        (("1" (inst 2 "x!1")
          (("1" (expand "<=")
            (("1" (expand "leq_pred")
              (("1" (inst -1 "x!1")
                (("1" (split -1)
                  (("1" (assert) nil nil)
                   ("2" (assert) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 1)
        (("2" (skolem -1 "i")
          (("2" (flatten)
            (("2"
              (case "FORALL (res : upto(V_N_b - 1 -i)) : aux(i, res, Pf) + 1 <= aux(i, res, P0)")
              (("1" (assert)
                (("1"
                  (case "FORALL (j : below(V_N_b - i)), (res:upto(V_N_b -1 -i -j)) : 1 + aux(i+j, res, Pf) <= aux(i+j, res, P0)")
                  (("1" (inst -1 "V_N_b -1 -i" "0")
                    (("1" (assert) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (induct "j")
                      (("1" (assert) nil nil)
                       ("2" (skolem 1 "j")
                        (("2" (flatten)
                          (("2" (skeep)
                            (("2" (expand "aux" 1)
                              (("2"
                                (expand "<=")
                                (("2"
                                  (expand "leq_pred")
                                  (("2"
                                    (inst -5 "1+i+j")
                                    (("2"
                                      (lemma "aux_gr3")
                                      (("2"
                                        (inst -1 "P0" "i+j" "res" "1")
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst -5 "res+1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (lift-if 2)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -2 1 LR)
                                                      (("1"
                                                        (inst -4 "res")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst -3 "res")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "aux" 1)
                  (("2" (lift-if 1)
                    (("2" (split 1)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (lemma "aux_gr3")
                            (("2" (inst -1 "P0" "i-1" "res" "1")
                              (("2"
                                (replace -1 2 LR)
                                (("2"
                                  (lemma "aux_gr2")
                                  (("2"
                                    (inst -1 "Pf" "P0" "i-1" "res")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nTpred type-eq-decl nil nTpred_order nil)
    (V_N type-eq-decl nil nTpred_order nil)
    (leq_pred const-decl "bool" nTpred_order nil))
   shostak))
 (sum_growing 0
  (sum_growing-1 nil 3770154877
   ("" (skeep)
    (("" (use "leq_dist")
      (("" (assert)
        (("" (flatten)
          (("" (lemma "aux_gr2")
            (("" (expand "array_sum")
              (("" (inst-cp -1 "P`1" "P'`1" "V_N_b -1" "0")
                (("" (inst-cp -1 "P`2" "P'`2" "V_N_b -1" "0")
                  (("" (inst-cp -1 "P`3" "P'`3" "V_N_b -1" "0")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((leq_dist formula-decl nil nTpred_order nil)
    (nTprop type-eq-decl nil nTpred_order nil)
    (nTpred type-eq-decl nil nTpred_order nil)
    (V_N type-eq-decl nil nTpred_order nil))
   shostak))
 (sum_inj 0
  (sum_inj-1 nil 3770395938
   ("" (skeep)
    (("" (use "leq_dist")
      (("" (assert)
        (("" (flatten)
          (("" (lemma "aux_inj")
            (("" (inst-cp -1 "P`1" "P'`1")
              (("" (assert)
                (("" (inst-cp -1 "P`2" "P'`2")
                  (("" (inst -1 "P`3" "P'`3")
                    (("" (assert)
                      (("" (lemma "aux_gr2")
                        (("" (inst-cp -1 "P`1" "P'`1" "V_N_b -1" "0")
                          (("" (inst-cp -1 "P`2" "P'`2" "V_N_b -1" "0")
                            (("" (inst -1 "P`3" "P'`3" "V_N_b -1" "0")
                              ((""
                                (assert)
                                ((""
                                  (expand "array_sum")
                                  (("" (decompose-equality 1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((leq_dist formula-decl nil nTpred_order nil)
    (nTprop type-eq-decl nil nTpred_order nil)
    (nTpred type-eq-decl nil nTpred_order nil)
    (V_N type-eq-decl nil nTpred_order nil))
   shostak)))

