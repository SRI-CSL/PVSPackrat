% ————————————————————————————–
% ast.pvs
%  |– ast THEORY
%     Refines the raw pre_ast type with a notion of success/failure
%     (called meaning) and a notion of wellformedness.
%     Shows the fact that wellformed trees have a meaning.
%     Defines the proper ast type (output type of the parser)
% ————————————————————————————–


ast [
     V_T   : TYPE+,
     <=    : (total_order?[V_T]),
     V_N_b : posnat,
     bound : nat,
     V_S   : TYPE ]:
     THEORY
  BEGIN

  IMPORTING pre_ast[V_T, <=, V_N_b, bound, V_S]
  T: VAR pre_ast
  in_range(a, b: V_T)(x: V_T): bool = (a <= x) ∧ (x <= b)

  astType: TYPE = {success, failure, undefined}

  % Recursively computes the type of a pre_ast tree
  astType?(T): RECURSIVE astType =
    CASES T
      OF fail(s, e): failure,
         ε(s, e): COND s = e -> success, ELSE -> undefined ENDCOND,
         any(s, e, x):
           COND s + 1 = e -> success,
                s = e = bound -> failure,
                ELSE -> undefined
           ENDCOND,
         terminal(s, e, a, x):
           COND s + 1 = e ∧ a = x -> success,
                s + 1 = e ∧ a /= x -> failure,
                s = e = bound -> failure,
                ELSE -> undefined
           ENDCOND,
         range(s, e, a, b, x):
           COND s + 1 = e ∧ in_range(a, b)(x) -> success,
                s + 1 = e ∧ (NOT (in_range(a, b)(x))) -> failure,
                s = e = bound -> failure,
                ELSE -> undefined
           ENDCOND,
         nonTerminal(s, e, A, T): astType?(T),
         semantic(s, e, A, S): IF s <= e THEN success ELSE undefined ENDIF,
         seq(s, e, T1, T2):
           LET tT1 = astType?(T1), tT2 = astType?(T2) IN
             COND tT1 = success ∧ tT2 = success -> success,
                  tT1 = failure ∨ (tT1 = success ∧ tT2 = failure) ->
                    failure,
                  ELSE -> undefined
             ENDCOND,
         prior(s, e, T1, T2):
           LET tT1 = astType?(T1), tT2 = astType?(T2) IN
             COND tT1 = success ∨ (tT1 = failure ∧ tT2 = success) ->
                    success,
                  tT1 = failure ∧ tT2 = failure -> failure,
                  ELSE -> undefined
             ENDCOND,
         star(s, e, T0, Ts):
           LET tT0 = astType?(T0), tTs = astType?(Ts) IN
             COND tT0 = failure -> success,
                  tT0 = success ∧ tTs = success -> success,
                  ELSE -> undefined
             ENDCOND,
         plus(s, e, T0, Ts):
           LET tT0 = astType?(T0), tTs = astType?(Ts) IN
             COND tT0 = failure -> failure,
                  tT0 = success ∧ tTs = failure -> success,
                  tT0 = success ∧ tTs = success -> success,
                  ELSE -> undefined
             ENDCOND,
         opt(s, e, T0):
           IF (astType?(T0) /= undefined) THEN success
           ELSE undefined
           ENDIF,
         notP(s, e, T):
           LET tT = astType?(T) IN
             COND tT = success -> failure,
                  tT = failure -> success,
                  ELSE -> undefined
             ENDCOND,
         andP(s, e, T): astType?(T)
      ELSE undefined
      ENDCASES
     MEASURE astMeasure
	AUTO_REWRITE+ astType?

  astMeaningful?(T) : bool = ( astType?(T) = success) ∨ (astType?(T) = failure)
  astMeaningful : TYPE = (astMeaningful?)
  AUTO_REWRITE+ astMeaningful?

  % Checks that a tree verifies a certain number of conditions
  % These conditions ensure that the tree represent a possible computational
  % path of the parser
  astWellformed?(T): RECURSIVE bool =
    CASES T
      OF ε(s, e): astMeaningful?(T),
         any(s, e, x): astMeaningful?(T),
         terminal(s, e, x, y): astMeaningful?(T),
         range(s, e, a, b, x): astMeaningful?(T),
         nonTerminal(s, e, A, T): (s(T) = s) ∧ (e(T) = e) ∧ astWellformed?(T),
         semantic(s, e, A, S): astMeaningful?(T),
         seq(s, e, T1, T2): (s(T1) = s) ∧ (e(T1) = s(T2)) ∧ (e(T2) = e) ∧ astWellformed?(T1) ∧ (skip?(T2) ⇒ e(T2) = s(T2) = e(T1)) ∧ (astType?(T1) = failure ⇔ skip?(T2)) ∧ (astType?(T1) = success ⇔ astWellformed?(T2)),
         prior(s, e, T1, T2): (s(T1) = s) ∧ (s(T2) = s) ∧ astWellformed?(T1) ∧ ((astType?(T1) = failure) ⇒ (astWellformed?(T2) ∧ (e = e(T2)))) ∧ ((astType?(T1) = success) ⇒ (skip?(T2) ∧ (e(T2) = s) ∧ (e = e(T1)))),
         star(s, e, T0, Ts): (s(T0) = s) ∧ (e(T0) = s(Ts)) ∧ astWellformed?(T0) ∧ (astType?(T0) = success ⇒ (astWellformed?(Ts) ∧ (e = e(Ts)))) ∧ (astType?(T0) = failure ⇒ (skip?(Ts) ∧ (e(Ts) = s(Ts)) ∧ (s = e))),
         plus(s, e, T0, Ts): (s(T0) = s) ∧ (e(T0) = s(Ts)) ∧ astWellformed?(T0) ∧ (astType?(T0) = success ⇒ (astWellformed?(Ts) ∧ (e = e(Ts)))) ∧ (astType?(T0) = failure ⇒ (skip?(Ts) ∧ (e(Ts) = s(Ts)) ∧ (s = e))),
         opt(s, e, T0): (s(T0) = s) ∧ astWellformed?(T0) ∧ (astType?(T0) = success ⇒ (e = e(T0))) ∧ (astType?(T0) = failure ⇒ (e = s)),
         notP(s, e, T): (s = e) ∧ (s(T) = s) ∧ astWellformed?(T),
         andP(s, e, T): (s = e) ∧ (s(T) = s) ∧ astWellformed?(T),
         skip(s, e, G): FALSE,
         fail(s, e): (s <= e)
      ENDCASES
     MEASURE astMeasure
		 AUTO_REWRITE+ astWellformed?

  % Exmaple lemmas of properties of a wellformed tree
  Star_cannot_fail: LEMMA FORALL T: star?(T) ⇒ astType?(T) /= failure
  Skip_is_badly_formed: LEMMA FORALL T: skip?(T) ⇒ NOT astWellformed?(T)


  % Important properties of a meaningful tree
  Wellformedness_is_meaningfulness: LEMMA
    FORALL T: astWellformed?(T) ⇒ astMeaningful?(T)
  Consumption_growth: LEMMA FORALL T: astWellformed?(T) ⇒ s(T) <= e(T)
  Wellformed_theorem: THEOREM
    FORALL T:
      astWellformed?(T) ⇒
       ((s(T) <= e(T)) ∧
         ((astType?(T) = failure) ∨ (astType?(T) = success)))
	%AUTO_REWRITE+ Consumption_growth, Wellformedness_is_meaningfulness

  % Type definition
  ast: TYPE = {T: pre_ast | astWellformed?(T)}


END ast
